[package]
name = "lambdaworks-stark"
version = "0.1.0"
edition = "2021"
rust-version = "1.66"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
lambdaworks-math = { git = "https://github.com/lambdaclass/lambdaworks", rev = "a17b951" }
lambdaworks-crypto = { git = "https://github.com/lambdaclass/lambdaworks", rev = "a17b951" }
thiserror = "1.0"
log = "0.4.17"
sha3 = "0.10.6"
itertools = "0.11.0"
# Required by Cairo
bincode = { version = "2.0.0-rc.2", tag = "v2.0.0-rc.2", git = "https://github.com/bincode-org/bincode.git", optional = true }
cairo-vm = { git = "https://github.com/lambdaclass/cairo-vm", rev = "44dae41", default-features = false, features = [
    "cairo-1-hints",
], optional = true }
cairo-lang-starknet = { version = "2.0", optional = true }
serde_json = { version = "1.0", optional = true }
num-integer = { version = "0.1.45", optional = true }
# Parallelization crates
rayon = { version = "1.7.0", optional = true }
wasm-bindgen = "0.2"

[dev-dependencies]
proptest = "1.2.0"
hex = "0.4.3"
criterion = "0.4"
env_logger = "*"
test-log = { version = "0.2.11", features = ["log"] }
assert_matches = "1.5.0"
rstest = "0.17.0"
rand = "0.8.5"

[features]
default = ["cairo"]
test_fiat_shamir = []
cairo = [
    "bincode",
    "serde_json",
    "num-integer",
    "cairo-vm",
    "cairo-lang-starknet",
]
instruments = [] # This enables timing prints in prover and verifier
metal = ["lambdaworks-math/metal"]
parallel = ["dep:rayon"]

[[bench]]
name = "criterion_prover"
harness = false
metal = ["lambdaworks-math/metal"]

[[bench]]
name = "criterion_verifier"
harness = false
metal = ["lambdaworks-math/metal"]

[profile.release]
lto = true
opt-level = 3
codegen-units = 1

[profile.test]
lto = "thin"
opt-level = 3
debug = 2

[lib]
crate-type = ["cdylib", "rlib"]

[package.metadata.wasm-pack.profile.dev]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes
wasm-opt = ['-O']

[package.metadata.wasm-pack.profile.dev.wasm-bindgen]
# Should we enable wasm-bindgen's debug assertions in its generated JS glue?
debug-js-glue = true
# Should wasm-bindgen demangle the symbols in the "name" custom section?
demangle-name-section = true
# Should we emit the DWARF debug info custom sections?
dwarf-debug-info = false
# Should we omit the default import path?
omit-default-module-path = false

[package.metadata.wasm-pack.profile.profiling]
wasm-opt = ['-O']

[package.metadata.wasm-pack.profile.profiling.wasm-bindgen]
debug-js-glue = false
demangle-name-section = true
dwarf-debug-info = false
omit-default-module-path = false

# `wasm-opt` is on by default in for the release profile, but it can be
# disabled by setting it to `false`
[package.metadata.wasm-pack.profile.release]
wasm-opt = false

[package.metadata.wasm-pack.profile.release.wasm-bindgen]
debug-js-glue = false
demangle-name-section = true
dwarf-debug-info = false
omit-default-module-path = false
